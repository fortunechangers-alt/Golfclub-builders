// Golf Club Builders - Main JavaScriptdocument.addEventListener('DOMContentLoaded', function() { console.log('DOM loaded, updating cart count...'); // Update cart count on page load updateCartCount();  // Also update after a short delay to ensure localStorage is ready setTimeout(updateCartCount, 100);  // Header scroll effect const header = document.querySelector('.header');  if (header) { window.addEventListener('scroll', function() { if (window.scrollY > 50) { header.classList.add('scrolled'); } else { header.classList.remove('scrolled'); } }); } // Mobile menu toggle - with better error handling const mobileMenuBtn = document.querySelector('.mobile-menu-btn'); const navMenu = document.querySelector('.nav-menu');  if (mobileMenuBtn && navMenu) { // Remove any existing listeners first const newMenuBtn = mobileMenuBtn.cloneNode(true); mobileMenuBtn.parentNode.replaceChild(newMenuBtn, mobileMenuBtn);  newMenuBtn.addEventListener('click', function(e) { e.preventDefault(); e.stopPropagation(); console.log('Mobile menu clicked'); navMenu.classList.toggle('active'); newMenuBtn.classList.toggle('active'); });  // Close mobile menu when clicking a link navMenu.querySelectorAll('.nav-link, .cart-button').forEach(link => { link.addEventListener('click', function() { navMenu.classList.remove('active'); newMenuBtn.classList.remove('active'); }); });  // Close menu when clicking outside document.addEventListener('click', function(e) { if (!navMenu.contains(e.target) && !newMenuBtn.contains(e.target)) { navMenu.classList.remove('active'); newMenuBtn.classList.remove('active'); } }); } else { console.warn('Mobile menu elements not found', {mobileMenuBtn, navMenu}); } // Smooth scroll for anchor links document.querySelectorAll('a[href^="#"]').forEach(anchor => { anchor.addEventListener('click', function (e) { e.preventDefault(); const target = document.querySelector(this.getAttribute('href')); if (target) { target.scrollIntoView({ behavior: 'smooth', block: 'start' }); } }); }); // Calendar functionality initializeCalendar();  // Time slot selection initializeTimeSlots();});// Global variable to store available dates from backendlet availableDates = [];// Calendar Functionsasync function initializeCalendar() { const calendarElement = document.querySelector('.calendar'); if (!calendarElement) return; // Fetch available dates from backend await fetchAvailableDates(); // Get current month and year let currentDate = new Date(); let currentMonth = currentDate.getMonth(); let currentYear = currentDate.getFullYear(); // Render initial calendar renderCalendar(currentMonth, currentYear); // Previous/Next month navigation const prevBtn = document.querySelector('.calendar-prev'); const nextBtn = document.querySelector('.calendar-next'); if (prevBtn) { prevBtn.addEventListener('click', function() { currentMonth--; if (currentMonth < 0) { currentMonth = 11; currentYear--; } renderCalendar(currentMonth, currentYear); }); } if (nextBtn) { nextBtn.addEventListener('click', function() { currentMonth++; if (currentMonth > 11) { currentMonth = 0; currentYear++; } renderCalendar(currentMonth, currentYear); }); }}// Fetch available dates from backend APIasync function fetchAvailableDates() { try { const response = await fetch('/api/available-dates'); const data = await response.json();  if (data.status === 'success' && data.dates) { availableDates = data.dates; console.log('Loaded available dates from backend:', availableDates); } else { console.warn('No available dates returned from backend'); availableDates = []; } } catch (error) { console.error('Error fetching available dates:', error); availableDates = []; }}function renderCalendar(month, year) { const calendarGrid = document.querySelector('.calendar-grid'); const calendarTitle = document.querySelector('.calendar-title');  if (!calendarGrid || !calendarTitle) return; // Month names const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']; calendarTitle.textContent = `${monthNames[month]} ${year}`; // Clear previous calendar calendarGrid.innerHTML = ''; // Day headers const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']; dayHeaders.forEach(day => { const dayHeader = document.createElement('div'); dayHeader.classList.add('calendar-day-header'); dayHeader.textContent = day; calendarGrid.appendChild(dayHeader); }); // Get first day of month const firstDay = new Date(year, month, 1).getDay(); const daysInMonth = new Date(year, month + 1, 0).getDate(); // Add blank cells for days before month starts for (let i = 0; i < firstDay; i++) { const blankDay = document.createElement('div'); blankDay.classList.add('calendar-day', 'blank'); calendarGrid.appendChild(blankDay); } // Add days const today = new Date(); today.setHours(0, 0, 0, 0); // Reset time for accurate comparison  for (let day = 1; day <= daysInMonth; day++) { const dayDate = new Date(year, month, day); const dayElement = document.createElement('div'); dayElement.classList.add('calendar-day'); dayElement.textContent = day;  // Format date as YYYY-MM-DD to match backend format const formattedDate = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`; dayElement.dataset.date = formattedDate; // Check if this date is in the backend's available dates list const isAvailable = availableDates.includes(formattedDate);  // Check if date is in the past const isPast = dayDate < today;  if (isPast || !isAvailable) { // Gray - blocked (past date or not approved by backend) dayElement.classList.add('blocked'); dayElement.style.cursor = 'not-allowed'; } else { // Light green - available for selection dayElement.classList.add('available'); dayElement.style.cursor = 'pointer'; dayElement.addEventListener('click', function() { selectDate(this); }); } calendarGrid.appendChild(dayElement); }}function selectDate(dateElement) { // Check if date is blocked if (dateElement.classList.contains('blocked')) return; // Remove previous selection document.querySelectorAll('.calendar-day.selected').forEach(el => { el.classList.remove('selected'); }); // Add selection dateElement.classList.add('selected'); // Get selected date const selectedDate = dateElement.dataset.date;  // Load time slots for selected date loadTimeSlots(selectedDate);}async function loadTimeSlots(date) { const timeSlotsContainer = document.querySelector('.time-slots'); if (!timeSlotsContainer) return; // Show loading timeSlotsContainer.innerHTML = '<p>Loading available time slots...</p>'; try { // Fetch available time slots from server const response = await fetch(`/api/timeslots/get?date=${date}&service_id=${getSelectedServiceId()}`); const data = await response.json(); // Clear loading message timeSlotsContainer.innerHTML = ''; if (data.slots && data.slots.length > 0) { data.slots.forEach(slot => { const slotElement = document.createElement('div'); slotElement.classList.add('time-slot'); slotElement.textContent = slot.time; slotElement.dataset.time = slot.time; if (slot.available) { slotElement.addEventListener('click', function() { selectTimeSlot(this); }); } else { slotElement.classList.add('booked'); } timeSlotsContainer.appendChild(slotElement); }); } else { timeSlotsContainer.innerHTML = '<p>No time slots available for this date.</p>'; } } catch (error) { console.error('Error loading time slots:', error); timeSlotsContainer.innerHTML = '<p>Error loading time slots. Please try again.</p>'; }}function selectTimeSlot(slotElement) { // Remove previous selection document.querySelectorAll('.time-slot.selected').forEach(el => { el.classList.remove('selected'); }); // Add selection slotElement.classList.add('selected'); // Enable continue button const continueBtn = document.querySelector('.booking-continue-btn'); if (continueBtn) { continueBtn.disabled = false; }}function initializeTimeSlots() { // Pre-populate time slots if date is already selected const selectedDate = document.querySelector('.calendar-day.selected'); if (selectedDate) { loadTimeSlots(selectedDate.dataset.date); }}function getSelectedServiceId() { const serviceSelect = document.querySelector('#service_id'); return serviceSelect ? serviceSelect.value : 1;}// Form Validationfunction validateBookingForm() { const form = document.querySelector('.booking-form'); if (!form) return true; const requiredFields = form.querySelectorAll('[required]'); let isValid = true; requiredFields.forEach(field => { if (!field.value.trim()) { field.classList.add('error'); isValid = false; } else { field.classList.remove('error'); } }); return isValid;}// Admin Dashboard Functionsfunction initializeAdminDashboard() { // Initialize charts if needed const chartElements = document.querySelectorAll('[data-chart]'); if (chartElements.length > 0) { // Chart initialization code here }}// Shopping Cart Functions - Removed duplicate cart variable// Pages with cart functionality (like custom-club-building) declare their own cart variable// Notification Systemfunction showNotification(message, type = 'success') { const notification = document.createElement('div'); notification.classList.add('notification', `notification-${type}`); notification.textContent = message; document.body.appendChild(notification); setTimeout(() => { notification.classList.add('show'); }, 100); setTimeout(() => { notification.classList.remove('show'); setTimeout(() => { notification.remove(); }, 300); }, 3000);}// Image lazy loadingconst lazyImages = document.querySelectorAll('img[data-src]');const imageObserver = new IntersectionObserver((entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { const img = entry.target; img.src = img.dataset.src; img.removeAttribute('data-src'); observer.unobserve(img); } });});lazyImages.forEach(img => imageObserver.observe(img));// Cart functionalityfunction updateCartCount() { console.log('updateCartCount called'); const cartCountElement = document.getElementById('cart-count'); console.log('Cart count element:', cartCountElement);  if (cartCountElement) { const cart = JSON.parse(localStorage.getItem('golf_cart')) || []; console.log('Cart from localStorage:', cart); let totalItems = 0;  // Get previous count for comparison const previousCount = parseInt(cartCountElement.textContent) || 0;  cart.forEach(item => { totalItems += item.quantity || 1; });  console.log('Total items in cart:', totalItems);  // Update the number if (totalItems > 0) { cartCountElement.textContent = totalItems; cartCountElement.style.display = 'flex'; console.log('Cart badge should now show:', totalItems); } else { cartCountElement.textContent = ''; cartCountElement.style.display = 'none'; console.log('Cart is empty, hiding badge'); }  // Add visual pulse when count increases if (totalItems > previousCount && totalItems > 0) { // Add 'updated' class for red pulse animation cartCountElement.classList.add('updated');  // Remove class after animation completes setTimeout(() => { cartCountElement.classList.remove('updated'); }, 500); } } else { console.error('Cart count element not found!'); }}// Listen for storage changes to update cart count across tabswindow.addEventListener('storage', function(e) { if (e.key === 'golf_cart') { updateCartCount(); }});// Listen for custom cart update eventsdocument.addEventListener('cartUpdated', function() { updateCartCount();});// Add CSS animation for cart countconst style = document.createElement('style');style.textContent = ` @keyframes cartPulse { 0% { transform: scale(1); } 50% { transform: scale(1.2); } 100% { transform: scale(1); } }`;document.head.appendChild(style);